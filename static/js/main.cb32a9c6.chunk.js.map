{"version":3,"sources":["worker.js","diagrams.js","utils.js","logic.js","MainView.js","Version.js","App.js","reportWebVitals.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","drawDiagram","chartElement","lines","yAxisOptions","maybeTicks","undefined","min","max","ticks","Chart","type","data","datasets","map","line","label","fill","borderColor","colour","borderWidth","radius","options","legend","labels","boxWidth","scales","xAxes","scaleLabel","display","labelString","_","index","autoSkip","maxRotation","callback","tick","yAxes","events","animation","duration","range","n","Array","from","keys","randomChoice","xs","Math","floor","random","length","argmax","topValue","Number","NEGATIVE_INFINITY","ties","forEach","value","push","average","reduce","acc","x","GreedyActionSelector","_actions","_ns","qs","_t","U","EpsilonGreedyActionSelector","epsilon","this","actions","UCBActionSelector","c","ns","t","ucb","q","MAX_VALUE","sqrt","log","constantStepSizeCalculator","stepSize","_n","decayingStepSizeCalculator","Experiment","actionSelector","stepSizeCalculator","initialValue","action","reward","oldEstimate","newEstimate","makeExperiment","experimentConfig","actionSelectorName","args","Error","makeActionSelector","stepSizeCalculatorName","makeStepSizeCalculator","averageAcrossWorkers","propertyName","workerResults","experimentIndex","numSteps","step","wr","pluckValueFromStep","pluckValuesFromSteps","drawDiagrams","experiments","results","lines1","experiment","averageRewardsPerStep","D","lines2","averagePercentOptimalActionsPerStep","ACTIONS","MainView","useState","experimentsConfig","L","workerResultsRef","useRef","runsCompletedCount","setRunsCompletedCount","onMessage","message","count","current","finalResults","firstWorkerResult","firstExperiment","numExperiments","averageRewards","combineWorkerResults","workerInstances","worker","workerInstance","addEventListener","useEffect","workerMessage","K","RUNS","STEPS","workerIndex","runExperiments","className","id","Version","version","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb32a9c6.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"runExperiments\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"72071a34b129e22549c7.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { Chart } from 'chart.js'\n\nexport const drawDiagram = (chartElement, lines, yAxisOptions) => {\n\n  const makeDataset = line => ({\n    data: line.data,\n    label: line.label,\n    fill: false,\n    borderColor: line.colour,\n    borderWidth: 1,\n    radius: 0\n  })\n\n  const maybeTicks = yAxisOptions.min !== undefined && yAxisOptions.max !== undefined\n    ? {\n      ticks: {\n        min: yAxisOptions.min,\n        max: yAxisOptions.max\n      }\n    }\n    : undefined\n\n  new Chart(chartElement, {\n    type: 'line',\n    data: {\n      datasets: lines.map(makeDataset)\n    },\n    options: {\n      legend: {\n        labels: {\n          boxWidth: 20\n        }\n      },\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Steps'\n          },\n          labels: lines[0].data.map((_, index) => index + 1),\n          ticks: {\n            autoSkip: false,\n            maxRotation: 0,\n            callback: tick => {\n              if (tick === 1) return 1\n              return tick % 250 === 0 ? tick : null\n            }\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: yAxisOptions.label\n          },\n          ...maybeTicks\n        }]\n      },\n      events: [],\n      animation: {\n        duration: 0\n      }\n    }\n  })\n}\n","export const range = n => Array.from(Array(n).keys())\n\nexport const randomChoice = xs => xs[Math.floor(Math.random() * xs.length)]\n\nexport const argmax = xs => {\n  let topValue = Number.NEGATIVE_INFINITY\n  let ties = []\n  xs.forEach((value, index) => {\n    if (value > topValue) {\n      topValue = value\n      ties = [index]\n    } else {\n      if (value === topValue) {\n        ties.push(index)\n      }\n    }\n  })\n  return ties.length === 1 ? ties[0] : randomChoice(ties)\n}\n\nexport const average = xs => {\n  const sum = xs.reduce((acc, x) => acc + x, 0)\n  const count = xs.length\n  return sum / count\n}\n","import random from 'random'\nimport * as U from './utils'\n\nexport class GreedyActionSelector {\n  get name() {\n    return 'greedy'\n  }\n\n  selectAction(_actions, _ns, qs, _t) {\n    return U.argmax(qs)\n  }\n}\n\nexport class EpsilonGreedyActionSelector {\n  constructor(epsilon) {\n    this.epsilon = epsilon\n  }\n\n  get name() {\n    return `ε-greedy, ε = ${this.epsilon}`\n  }\n\n  selectAction(actions, _ns, qs, _t) {\n    return Math.random() < this.epsilon\n      ? U.randomChoice(actions)\n      : U.argmax(qs)\n  }\n}\n\nexport class UCBActionSelector {\n  constructor(c) {\n    this.c = c\n  }\n\n  get name() {\n    return `UCB, c = ${this.c}`\n  }\n\n  selectAction(_actions, ns, qs, t) {\n    return U.argmax(this.ucb(ns, qs, t))\n  }\n\n  ucb(ns, qs, t) {\n    return qs.map((q, index) => {\n      const n = ns[index]\n      if (n === 0) return Number.MAX_VALUE\n      return q + this.c * Math.sqrt(Math.log(t) / n)\n    })\n  }\n}\n\nexport const constantStepSizeCalculator = stepSize => _n => stepSize\nexport const decayingStepSizeCalculator = n => 1 / n\n\nexport class Experiment {\n  constructor(actions, actionSelector, stepSizeCalculator, colour, initialValue = 0) {\n    this.actions = actions\n    this.actionSelector = actionSelector\n    this.stepSizeCalculator = stepSizeCalculator\n    this.colour = colour\n    this.initialValue = initialValue\n    this.ns = []\n    this.qs = []\n  }\n\n  get name() {\n    return this.actionSelector.name\n  }\n\n  reset() {\n    this.ns = Array(this.actions.length).fill(0)\n    this.qs = Array(this.actions.length).fill(this.initialValue)\n  }\n\n  update(action, reward) {\n    const n = this.ns[action] + 1\n    this.ns[action] = n\n    const oldEstimate = this.qs[action]\n    const alpha = this.stepSizeCalculator(n)\n    const newEstimate = oldEstimate + alpha * (reward - oldEstimate)\n    this.qs[action] = newEstimate\n  }\n}\n\nexport class ExperimentResults {\n  constructor(steps) {\n    this.steps = steps\n    this.reset()\n  }\n\n  reset() {\n    this.runningAverageReward = Array(this.steps).fill(0)\n    this.runningAveragePercentOptimalAction = Array(this.steps).fill(0)\n  }\n\n  update(step, n, reward, isOptimal) {\n    this.updateRunningAverageReward(step, n, reward)\n    this.updateRunningAveragePercentOptimalAction(step, n, isOptimal)\n  }\n\n  updateRunningAverageReward(step, n, reward,) {\n    const oldAverage = this.runningAverageReward[step]\n    const newAverage = oldAverage + (1 / n) * (reward - oldAverage)\n    this.runningAverageReward[step] = newAverage\n  }\n\n  updateRunningAveragePercentOptimalAction(step, n, isOptimal,) {\n    const percentOptimalAction = isOptimal ? 100 : 0\n    const oldAverage = this.runningAveragePercentOptimalAction[step]\n    const newAverage = oldAverage + (1 / n) * (percentOptimalAction - oldAverage)\n    this.runningAveragePercentOptimalAction[step] = newAverage\n  }\n}\n\nexport class TestBed {\n  constructor(k) {\n    this.armDistributions = TestBed.makeArmDistributions(k)\n    const trueValues = this.armDistributions.map(({ trueValue }) => trueValue)\n    this.optimalArm = U.argmax(trueValues)\n  }\n\n  static makeArmDistributions(k) {\n    const trueValues = TestBed.makeTrueValues(k)\n    const armDistributions = trueValues.map((trueValue, arm) => {\n      const mean = trueValue\n      const variance = 1\n      const normal = random.normal(mean, variance)\n      return { arm, trueValue, normal }\n    })\n    return armDistributions\n  }\n\n  static makeTrueValues(k) {\n    const mean = 0\n    const variance = 1\n    const normal = random.normal(mean, variance)\n    const trueValues = U.range(k).map(normal)\n    return trueValues\n  }\n}\n\nexport const bandit = (testBed, experiment, t) => {\n  const arm = experiment.actionSelector.selectAction(\n    experiment.actions,\n    experiment.ns,\n    experiment.qs,\n    t)\n  const reward = testBed.armDistributions[arm].normal()\n  experiment.update(arm, reward)\n  const isOptimal = arm === testBed.optimalArm\n  return { reward, isOptimal }\n}\n\nexport const makeActionSelector = experimentConfig => {\n  const [actionSelectorName, ...args] = experimentConfig.actionSelector\n  switch (actionSelectorName) {\n    case 'GreedyActionSelector': return new GreedyActionSelector(...args)\n    case 'EpsilonGreedyActionSelector': return new EpsilonGreedyActionSelector(...args)\n    case 'UCBActionSelector': return new UCBActionSelector(...args)\n    default: throw new Error(`Unexpected actionSelectorName, \"${actionSelectorName}\"`)\n  }\n}\n\nexport const makeStepSizeCalculator = experimentConfig => {\n  const [stepSizeCalculatorName, ...args] = experimentConfig.stepSizeCalculator\n  switch (stepSizeCalculatorName) {\n    case 'decayingStepSizeCalculator': return decayingStepSizeCalculator\n    case 'constantStepSizeCalculator': return constantStepSizeCalculator(...args)\n    default: throw new Error(`Unexpected stepSizeCalculatorName, \"${stepSizeCalculatorName}\"`)\n  }\n}\n\nexport const makeExperiment = (experimentConfig, actions) =>\n  new Experiment(\n    actions,\n    makeActionSelector(experimentConfig),\n    makeStepSizeCalculator(experimentConfig),\n    experimentConfig.colour,\n    experimentConfig.initialValue)\n","import React, { useEffect, useRef, useState } from 'react'\nimport * as D from './diagrams'\nimport * as L from './logic'\nimport * as U from './utils'\nimport './MainView.css'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport worker from 'workerize-loader!./worker'\n\n// --------------------------------------------------------------------------------\n\nconst pluckValueFromStep = (propertyName, workerResults, experimentIndex, step) =>\n  workerResults.map(wr => wr[experimentIndex][propertyName][step])\n\nconst pluckValuesFromSteps = (propertyName, workerResults, experimentIndex, numSteps) =>\n  U.range(numSteps).map(step =>\n    pluckValueFromStep(propertyName, workerResults, experimentIndex, step))\n\nconst averageAcrossWorkers = (propertyName, workerResults, experimentIndex, numSteps) => {\n  const workerValuesPerStep = pluckValuesFromSteps(propertyName, workerResults, experimentIndex, numSteps)\n  // step   0: [w0, w1, w2, w3]\n  // step   1: [w0, w1, w2, w3]\n  // ...\n  // step 999: [w0, w1, w2, w3]\n  return workerValuesPerStep.map(U.average)\n}\n\n// wr0: [exp0, exp1, exp2, exp4]\n// wr1: [exp0, exp1, exp2, exp4]\n// wr2: [exp0, exp1, exp2, exp4]\n// wr3: [exp0, exp1, exp2, exp4]\n// where:\n// exp0: { averageRewardsPerStep: [v0, v1, ...v999], averagePercentOptimalActions: [v0, v1, ...v999]}\n// exp1: { averageRewardsPerStep: [v0, v1, ...v999], averagePercentOptimalActions: [v0, v1, ...v999]}\n// exp2: { averageRewardsPerStep: [v0, v1, ...v999], averagePercentOptimalActions: [v0, v1, ...v999]}\n// exp3: { averageRewardsPerStep: [v0, v1, ...v999], averagePercentOptimalActions: [v0, v1, ...v999]}\nconst combineWorkerResults = workerResults => {\n\n  const firstWorkerResult = workerResults[0]\n  const firstExperiment = firstWorkerResult[0]\n\n  const numExperiments = firstWorkerResult.length\n  const numSteps = firstExperiment.averageRewards.length\n\n  const finalResults = U.range(numExperiments).map(experimentIndex => ({\n    averageRewardsPerStep: averageAcrossWorkers(\n      'averageRewards',\n      workerResults,\n      experimentIndex,\n      numSteps),\n    averagePercentOptimalActionsPerStep: averageAcrossWorkers(\n      'averagePercentOptimalActions',\n      workerResults,\n      experimentIndex,\n      numSteps)\n  }))\n  return finalResults\n}\n\n// --------------------------------------------------------------------------------\n\nconst drawDiagrams = (experiments, results) => {\n\n  const lines1 = experiments.map((experiment, experimentIndex) => ({\n    label: experiment.name,\n    colour: experiment.colour,\n    data: results[experimentIndex].averageRewardsPerStep\n  }))\n  D.drawDiagram('chart1', lines1, {\n    label: 'Average reward'\n  })\n\n  const lines2 = experiments.map((experiment, experimentIndex) => ({\n    label: experiment.name,\n    colour: experiment.colour,\n    data: results[experimentIndex].averagePercentOptimalActionsPerStep\n  }))\n  D.drawDiagram('chart2', lines2, {\n    label: '% Optimal action',\n    min: 0,\n    max: 100\n  })\n}\n\n// --------------------------------------------------------------------------------\n\nconst K = 10\nconst ACTIONS = U.range(K)\nconst RUNS = 2000\nconst STEPS = 1000\nconst NUM_WORKERS = 4\n\nconst MainView = () => {\n\n  const [experimentsConfig] = useState(() => [\n    {\n      actionSelector: ['GreedyActionSelector'],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'green'\n    },\n    {\n      actionSelector: ['GreedyActionSelector'],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'green'\n    },\n    {\n      actionSelector: ['EpsilonGreedyActionSelector', 0.01],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'red'\n    },\n    {\n      actionSelector: ['EpsilonGreedyActionSelector', 0.1],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'blue'\n    },\n    {\n      actionSelector: ['UCBActionSelector', 2],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'purple'\n    }\n  ])\n\n  const [experiments] = useState(() =>\n    experimentsConfig.map(experimentConfig =>\n      L.makeExperiment(experimentConfig, ACTIONS)))\n\n  const workerResultsRef = useRef([])\n\n  const [runsCompletedCount, setRunsCompletedCount] = useState(0)\n\n  const onMessage = message => {\n    switch (message.data.type) {\n\n      case 'runExperimentsRunCompleted':\n        setRunsCompletedCount(count => count + 1)\n        break\n\n      case 'runExperimentsResults':\n        workerResultsRef.current.push(message.data.results)\n        if (workerResultsRef.current.length === NUM_WORKERS) {\n          const finalResults = combineWorkerResults(workerResultsRef.current)\n          drawDiagrams(experiments, finalResults)\n        }\n        break\n\n      case 'RPC':\n      default:\n        return\n    }\n  }\n\n  const [workerInstances] = useState(() => {\n    const workerInstances = U.range(NUM_WORKERS).map(worker)\n    workerInstances.forEach(workerInstance =>\n      workerInstance.addEventListener('message', onMessage))\n    return workerInstances\n  })\n\n  useEffect(() => {\n    setRunsCompletedCount(0)\n    workerResultsRef.current = []\n\n    const workerMessage = {\n      K,\n      ACTIONS,\n      RUNS: RUNS / NUM_WORKERS,\n      STEPS,\n      experimentsConfig\n    }\n\n    workerInstances.forEach((workerInstance, workerIndex) =>\n      workerInstance.runExperiments(workerMessage, workerIndex))\n\n    drawDiagrams(experiments, experiments.map(() => ({\n      averageRewardsPerStep: [],\n      averagePercentOptimalActionsPerStep: []\n    })))\n  }, [experimentsConfig, experiments, workerInstances])\n\n  return (\n    <div className=\"mainview-layout\">\n      <div>[MainView] runsCompletedCount: {runsCompletedCount}</div>\n      <div className=\"chart-wrapper\">\n        <canvas id=\"chart1\"></canvas>\n      </div>\n      <div className=\"chart-wrapper\">\n        <canvas id=\"chart2\"></canvas>\n      </div>\n    </div>\n  )\n}\n\nexport default MainView\n","import { version } from '../package.json'\nimport './Version.css'\n\nconst Version = () =>\n  <div className=\"version\">version: {version}</div>\n\nexport default Version\n","import MainView from './MainView'\nimport Version from './Version'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainView />\n      <Version />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}