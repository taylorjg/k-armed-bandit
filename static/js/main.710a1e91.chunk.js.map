{"version":3,"sources":["worker.js","Version.js","App.js","reportWebVitals.js","diagrams.js","utils.js","logic.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","Version","className","version","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","drawDiagram","chartElement","lines","yAxisOptions","maybeTicks","undefined","min","max","ticks","Chart","type","data","datasets","map","line","label","fill","borderColor","colour","borderWidth","radius","options","legend","labels","boxWidth","scales","xAxes","scaleLabel","display","labelString","_","index","autoSkip","maxRotation","callback","tick","yAxes","events","animation","duration","range","n","Array","from","keys","randomChoice","xs","Math","floor","random","length","argmax","topValue","Number","NEGATIVE_INFINITY","ties","forEach","value","push","average","reduce","acc","x","GreedyActionSelector","_actions","_ns","qs","_t","U","EpsilonGreedyActionSelector","epsilon","this","actions","UCBActionSelector","c","ns","t","ucb","q","MAX_VALUE","sqrt","log","constantStepSizeCalculator","stepSize","_n","decayingStepSizeCalculator","Experiment","actionSelector","stepSizeCalculator","initialValue","action","reward","oldEstimate","newEstimate","makeExperiment","experimentConfig","actionSelectorName","args","Error","makeActionSelector","stepSizeCalculatorName","makeStepSizeCalculator","ReactDOM","render","StrictMode","document","getElementById","ACTIONS","experimentsConfig","experiments","L","workerResults","runs","averageAcrossWorkers","propertyName","experimentIndex","step","wr","pluckValueAtStep","pluckValuesAtAllSteps","onMessage","message","console","workerIndex","results","lines1","experiment","averageRewardsPerStep","D","lines2","averagePercentOptimalActionsPerStep","drawDiagrams","workerInstances","worker","workerInstance","addEventListener","workerMessage","K","RUNS","STEPS","runExperiments"],"mappings":"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","file":"static/js/main.710a1e91.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"runExperiments\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"72071a34b129e22549c7.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { version } from '../package.json'\nimport './Version.css'\n\nconst Version = () =>\n  <div className=\"version\">version: {version}</div>\n\nexport default Version\n","import Version from './Version'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Version />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { Chart } from 'chart.js'\n\nexport const drawDiagram = (chartElement, lines, yAxisOptions) => {\n\n  const makeDataset = line => ({\n    data: line.data,\n    label: line.label,\n    fill: false,\n    borderColor: line.colour,\n    borderWidth: 1,\n    radius: 0\n  })\n\n  const maybeTicks = yAxisOptions.min !== undefined && yAxisOptions.max !== undefined\n    ? {\n      ticks: {\n        min: yAxisOptions.min,\n        max: yAxisOptions.max\n      }\n    }\n    : undefined\n\n  new Chart(chartElement, {\n    type: 'line',\n    data: {\n      datasets: lines.map(makeDataset)\n    },\n    options: {\n      legend: {\n        labels: {\n          boxWidth: 20\n        }\n      },\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Steps'\n          },\n          labels: lines[0].data.map((_, index) => index + 1),\n          ticks: {\n            autoSkip: false,\n            maxRotation: 0,\n            callback: tick => {\n              if (tick === 1) return 1\n              return tick % 250 === 0 ? tick : null\n            }\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: yAxisOptions.label\n          },\n          ...maybeTicks\n        }]\n      },\n      events: [],\n      animation: {\n        duration: 0\n      }\n    }\n  })\n}\n","export const range = n => Array.from(Array(n).keys())\n\nexport const randomChoice = xs => xs[Math.floor(Math.random() * xs.length)]\n\nexport const argmax = xs => {\n  let topValue = Number.NEGATIVE_INFINITY\n  let ties = []\n  xs.forEach((value, index) => {\n    if (value > topValue) {\n      topValue = value\n      ties = [index]\n    } else {\n      if (value === topValue) {\n        ties.push(index)\n      }\n    }\n  })\n  return ties.length === 1 ? ties[0] : randomChoice(ties)\n}\n\nexport const average = xs => {\n  const sum = xs.reduce((acc, x) => acc + x, 0)\n  const count = xs.length\n  return sum / count\n}\n","import random from 'random'\nimport * as U from './utils'\n\nexport class GreedyActionSelector {\n  get name() {\n    return 'greedy'\n  }\n\n  selectAction(_actions, _ns, qs, _t) {\n    return U.argmax(qs)\n  }\n}\n\nexport class EpsilonGreedyActionSelector {\n  constructor(epsilon) {\n    this.epsilon = epsilon\n  }\n\n  get name() {\n    return `ε-greedy, ε = ${this.epsilon}`\n  }\n\n  selectAction(actions, _ns, qs, _t) {\n    return Math.random() < this.epsilon\n      ? U.randomChoice(actions)\n      : U.argmax(qs)\n  }\n}\n\nexport class UCBActionSelector {\n  constructor(c) {\n    this.c = c\n  }\n\n  get name() {\n    return `UCB, c = ${this.c}`\n  }\n\n  selectAction(_actions, ns, qs, t) {\n    return U.argmax(this.ucb(ns, qs, t))\n  }\n\n  ucb(ns, qs, t) {\n    return qs.map((q, index) => {\n      const n = ns[index]\n      if (n === 0) return Number.MAX_VALUE\n      return q + this.c * Math.sqrt(Math.log(t) / n)\n    })\n  }\n}\n\nexport const constantStepSizeCalculator = stepSize => _n => stepSize\nexport const decayingStepSizeCalculator = n => 1 / n\n\nexport class Experiment {\n  constructor(actions, actionSelector, stepSizeCalculator, colour, initialValue = 0) {\n    this.actions = actions\n    this.actionSelector = actionSelector\n    this.stepSizeCalculator = stepSizeCalculator\n    this.colour = colour\n    this.initialValue = initialValue\n    this.ns = []\n    this.qs = []\n  }\n\n  get name() {\n    return this.actionSelector.name\n  }\n\n  reset() {\n    this.ns = Array(this.actions.length).fill(0)\n    this.qs = Array(this.actions.length).fill(this.initialValue)\n  }\n\n  update(action, reward) {\n    const n = this.ns[action] + 1\n    this.ns[action] = n\n    const oldEstimate = this.qs[action]\n    const alpha = this.stepSizeCalculator(n)\n    const newEstimate = oldEstimate + alpha * (reward - oldEstimate)\n    this.qs[action] = newEstimate\n  }\n}\n\nexport class ExperimentResults {\n  constructor(steps) {\n    this.steps = steps\n    this.reset()\n  }\n\n  reset() {\n    this.runningAverageReward = Array(this.steps).fill(0)\n    this.runningAveragePercentOptimalAction = Array(this.steps).fill(0)\n  }\n\n  update(step, n, reward, isOptimal) {\n    this.updateRunningAverageReward(step, n, reward)\n    this.updateRunningAveragePercentOptimalAction(step, n, isOptimal)\n  }\n\n  updateRunningAverageReward(step, n, reward,) {\n    const oldAverage = this.runningAverageReward[step]\n    const newAverage = oldAverage + (1 / n) * (reward - oldAverage)\n    this.runningAverageReward[step] = newAverage\n  }\n\n  updateRunningAveragePercentOptimalAction(step, n, isOptimal,) {\n    const percentOptimalAction = isOptimal ? 100 : 0\n    const oldAverage = this.runningAveragePercentOptimalAction[step]\n    const newAverage = oldAverage + (1 / n) * (percentOptimalAction - oldAverage)\n    this.runningAveragePercentOptimalAction[step] = newAverage\n  }\n}\n\nexport class TestBed {\n  constructor(k) {\n    this.armDistributions = TestBed.makeArmDistributions(k)\n    const trueValues = this.armDistributions.map(({ trueValue }) => trueValue)\n    this.optimalArm = U.argmax(trueValues)\n  }\n\n  static makeArmDistributions(k) {\n    const trueValues = TestBed.makeTrueValues(k)\n    const armDistributions = trueValues.map((trueValue, arm) => {\n      const mean = trueValue\n      const variance = 1\n      const normal = random.normal(mean, variance)\n      return { arm, trueValue, normal }\n    })\n    return armDistributions\n  }\n\n  static makeTrueValues(k) {\n    const mean = 0\n    const variance = 1\n    const normal = random.normal(mean, variance)\n    const trueValues = U.range(k).map(normal)\n    return trueValues\n  }\n}\n\nexport const bandit = (testBed, experiment, t) => {\n  const arm = experiment.actionSelector.selectAction(\n    experiment.actions,\n    experiment.ns,\n    experiment.qs,\n    t)\n  const reward = testBed.armDistributions[arm].normal()\n  experiment.update(arm, reward)\n  const isOptimal = arm === testBed.optimalArm\n  return { reward, isOptimal }\n}\n\nexport const makeActionSelector = experimentConfig => {\n  const [actionSelectorName, ...args] = experimentConfig.actionSelector\n  switch (actionSelectorName) {\n    case 'GreedyActionSelector': return new GreedyActionSelector(...args)\n    case 'EpsilonGreedyActionSelector': return new EpsilonGreedyActionSelector(...args)\n    case 'UCBActionSelector': return new UCBActionSelector(...args)\n    default: throw new Error(`Unexpected actionSelectorName, \"${actionSelectorName}\"`)\n  }\n}\n\nexport const makeStepSizeCalculator = experimentConfig => {\n  const [stepSizeCalculatorName, ...args] = experimentConfig.stepSizeCalculator\n  switch (stepSizeCalculatorName) {\n    case 'decayingStepSizeCalculator': return decayingStepSizeCalculator\n    case 'constantStepSizeCalculator': return constantStepSizeCalculator(...args)\n    default: throw new Error(`Unexpected stepSizeCalculatorName, \"${stepSizeCalculatorName}\"`)\n  }\n}\n\nexport const makeExperiment = (experimentConfig, actions) =>\n  new Experiment(\n    actions,\n    makeActionSelector(experimentConfig),\n    makeStepSizeCalculator(experimentConfig),\n    experimentConfig.colour,\n    experimentConfig.initialValue)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as D from './diagrams'\nimport * as L from './logic'\nimport * as U from './utils'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport worker from 'workerize-loader!./worker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\nconst K = 10\nconst ACTIONS = U.range(K)\nconst RUNS = 2000\nconst STEPS = 1000\nconst NUM_WORKERS = 4\n\nconst experimentsConfig = [\n  {\n    actionSelector: ['GreedyActionSelector'],\n    stepSizeCalculator: ['decayingStepSizeCalculator'],\n    colour: 'green'\n  },\n  {\n    actionSelector: ['EpsilonGreedyActionSelector', 0.01],\n    stepSizeCalculator: ['decayingStepSizeCalculator'],\n    colour: 'red'\n  },\n  {\n    actionSelector: ['EpsilonGreedyActionSelector', 0.1],\n    stepSizeCalculator: ['decayingStepSizeCalculator'],\n    colour: 'blue'\n  },\n  {\n    actionSelector: ['UCBActionSelector', 2],\n    stepSizeCalculator: ['decayingStepSizeCalculator'],\n    colour: 'purple'\n  },\n  // {\n  //   actionSelector: ['GreedyActionSelector'],\n  //   stepSizeCalculator: ['constantStepSizeCalculator', 0.1],\n  //   colour: 'cyan',\n  //   initialValue: 5\n  // },\n  // {\n  //   actionSelector: ['EpsilonGreedyActionSelector', 0.1],\n  //   stepSizeCalculator: ['constantStepSizeCalculator', 0.1],\n  //   colour: 'grey'\n  // }\n]\n\nconst experiments = experimentsConfig.map(experimentConfig =>\n  L.makeExperiment(experimentConfig, ACTIONS))\n\nconst drawDiagrams = results => {\n\n  const lines1 = experiments.map((experiment, experimentIndex) => ({\n    label: experiment.name,\n    colour: experiment.colour,\n    data: results[experimentIndex].averageRewardsPerStep\n  }))\n  D.drawDiagram('chart1', lines1, {\n    label: 'Average reward'\n  })\n\n  const lines2 = experiments.map((experiment, experimentIndex) => ({\n    label: experiment.name,\n    colour: experiment.colour,\n    data: results[experimentIndex].averagePercentOptimalActionsPerStep\n  }))\n  D.drawDiagram('chart2', lines2, {\n    label: '% Optimal action',\n    min: 0,\n    max: 100\n  })\n}\n\nconst workerResults = []\nlet runs = 0\n\nconst pluckValueAtStep = (propertyName, workerResults, experimentIndex, step) =>\n  workerResults.map(wr => wr[experimentIndex][propertyName][step])\n\nconst pluckValuesAtAllSteps = (propertyName, workerResults, experimentIndex) =>\n  U.range(STEPS).map(step => pluckValueAtStep(propertyName, workerResults, experimentIndex, step))\n\nconst averageAcrossWorkers = (propertyName, workerResults, experimentIndex) =>\n  pluckValuesAtAllSteps(propertyName, workerResults, experimentIndex).map(U.average)\n\nconst combineWorkerResults = workerResults => {\n  const finalResults = U.range(experiments.length).map(experimentIndex => ({\n    averageRewardsPerStep: averageAcrossWorkers(\n      'averageRewards',\n      workerResults,\n      experimentIndex),\n    averagePercentOptimalActionsPerStep: averageAcrossWorkers(\n      'averagePercentOptimalActions',\n      workerResults,\n      experimentIndex)\n  }))\n  return finalResults\n}\n\nconst onMessage = message => {\n\n  if (message.data.type === 'runExperimentsRunCompleted') {\n    runs += 1\n    console.log(`[onMessage runExperimentsRunCompleted] workerIndex: ${message.data.workerIndex}; runs: ${runs}`)\n  }\n\n  if (message.data.type === 'runExperimentsResults') {\n    console.log(`[onMessage runExperimentsResults] workerIndex: ${message.data.workerIndex}`)\n    workerResults.push(message.data.results)\n    if (workerResults.length === NUM_WORKERS) {\n      const finalResults = combineWorkerResults(workerResults)\n      drawDiagrams(finalResults)\n    }\n  }\n}\n\nconst workerInstances = U.range(NUM_WORKERS).map(worker)\n\nworkerInstances.forEach(workerInstance =>\n  workerInstance.addEventListener('message', onMessage))\n\nconst workerMessage = {\n  K,\n  ACTIONS,\n  RUNS: RUNS / NUM_WORKERS,\n  STEPS,\n  experimentsConfig\n}\n\nworkerInstances.forEach((workerInstance, workerIndex) =>\n  workerInstance.runExperiments(workerMessage, workerIndex))\n"],"sourceRoot":""}