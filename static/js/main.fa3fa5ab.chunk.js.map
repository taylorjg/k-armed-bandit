{"version":3,"sources":["utils.js","SettingsPane.js","diagrams.js","logic.js","MainView.js","customHooks.js","Version.js","App.js","reportWebVitals.js","index.js","worker.js"],"names":["range","n","Array","from","keys","randomChoice","xs","Math","floor","random","length","argmax","topValue","Number","NEGATIVE_INFINITY","ties","forEach","value","index","push","average","reduce","acc","x","SettingsPane","settings","onOk","onCancel","useState","values","setValues","onChange","propertyName","e","target","Form","onSubmit","preventDefault","Group","Label","size","Control","as","webWorkers","U","map","k","type","runs","steps","className","variant","onClick","drawDiagram","chartElement","lines","yAxisOptions","maybeTicks","undefined","min","max","ticks","Chart","data","datasets","line","label","fill","borderColor","colour","borderWidth","radius","options","legend","labels","boxWidth","scales","xAxes","scaleLabel","display","labelString","_","autoSkip","maxRotation","callback","tick","yAxes","events","animation","duration","GreedyActionSelector","_actions","_ns","qs","_t","EpsilonGreedyActionSelector","epsilon","this","actions","UCBActionSelector","c","ns","t","ucb","q","MAX_VALUE","sqrt","log","constantStepSizeCalculator","stepSize","_n","decayingStepSizeCalculator","Experiment","actionSelector","stepSizeCalculator","initialValue","action","reward","oldEstimate","newEstimate","name","makeExperiment","experimentConfig","actionSelectorName","args","Error","makeActionSelector","stepSizeCalculatorName","makeStepSizeCalculator","averageAcrossWorkers","workerResults","experimentIndex","numSteps","step","wr","pluckValueFromStep","pluckValuesFromSteps","drawDiagrams","experiments","results","lines1","experiment","averageRewardsPerStep","D","lines2","averagePercentOptimalActionsPerStep","MainView","setSettings","experimentsConfig","L","workerResultsRef","useRef","runsCompletedCount","setRunsCompletedCount","workersCompletedCount","setWorkersCompletedCount","running","setRunning","useEffect","finalResults","firstWorkerResult","firstExperiment","numExperiments","averageRewards","combineWorkerResults","current","onMessageCallbackWrapper","cb","cbRef","useCallbackWrapper","message","count","workerInstances","worker","workerInstance","addEventListener","run","useCallback","normalWorkerRuns","lastWorkerRuns","lastWorkerIndex","workerIndex","workerRuns","workerMessage","runExperiments","settingsPaneIsOpen","setSettingsPaneIsOpen","closeSettingsPane","ProgressBar","now","disabled","id","title","width","isOpen","onRequestClose","Version","version","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","addMethods","methods","module","exports","w","Worker"],"mappings":"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","file":"static/js/main.fa3fa5ab.chunk.js","sourcesContent":["export const range = n => Array.from(Array(n).keys())\n\nexport const randomChoice = xs => xs[Math.floor(Math.random() * xs.length)]\n\nexport const argmax = xs => {\n  let topValue = Number.NEGATIVE_INFINITY\n  let ties = []\n  xs.forEach((value, index) => {\n    if (value > topValue) {\n      topValue = value\n      ties = [index]\n    } else {\n      if (value === topValue) {\n        ties.push(index)\n      }\n    }\n  })\n  return ties.length === 1 ? ties[0] : randomChoice(ties)\n}\n\nexport const average = xs => {\n  const sum = xs.reduce((acc, x) => acc + x, 0)\n  const count = xs.length\n  return sum / count\n}\n","import React, { useState } from 'react'\nimport { Form } from 'react-bootstrap'\nimport * as U from './utils'\nimport './SettingsPane.css'\n\nconst SettingsPane = ({ settings, onOk, onCancel }) => {\n\n  const [values, setValues] = useState(settings)\n\n  const onChange = propertyName => e => {\n    setValues(values => ({ ...values, [propertyName]: Number(e.target.value) }))\n  }\n\n  const onSubmit = e => {\n    e.preventDefault()\n    onOk(values)\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      {/* <Form.Group>\n        <Form.Label size=\"sm\">Web Workers</Form.Label>\n        <Form.Control type=\"number\" size=\"sm\" value={values.webWorkers} onChange={onChange('webWorkers')} />\n      </Form.Group> */}\n\n      <Form.Group>\n        <Form.Label size=\"sm\">Web Workers</Form.Label>\n        <Form.Control as=\"select\" size=\"sm\" value={values.webWorkers} onChange={onChange('webWorkers')}>\n          {U.range(8).map((n => n + 1)).map(n => <option key={n} value={n}>{n}</option>)}\n        </Form.Control>\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label size=\"sm\">Arms (k)</Form.Label>\n        <Form.Control as=\"select\" size=\"sm\" value={values.k} onChange={onChange('k')}>\n          {U.range(9).map((n => n + 2)).map(n => <option key={n} value={n}>{n}</option>)}\n        </Form.Control>\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label size=\"sm\">Runs</Form.Label>\n        <Form.Control type=\"number\" size=\"sm\" value={values.runs} onChange={onChange('runs')} />\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label size=\"sm\">Steps</Form.Label>\n        <Form.Control type=\"number\" size=\"sm\" value={values.steps} onChange={onChange('steps')} />\n      </Form.Group>\n\n      <div className=\"basic-config__controls\">\n        <button variant=\"primary\" type=\"submit\">OK</button>\n        <button type=\"button\" onClick={onCancel}>Cancel</button>\n      </div>\n    </Form>\n  )\n}\n\nexport default SettingsPane\n","import { Chart } from 'chart.js'\n\nexport const drawDiagram = (chartElement, lines, yAxisOptions) => {\n\n  const makeDataset = line => ({\n    data: line.data,\n    label: line.label,\n    fill: false,\n    borderColor: line.colour,\n    borderWidth: 1,\n    radius: 0\n  })\n\n  const maybeTicks = yAxisOptions.min !== undefined && yAxisOptions.max !== undefined\n    ? {\n      ticks: {\n        min: yAxisOptions.min,\n        max: yAxisOptions.max\n      }\n    }\n    : undefined\n\n  new Chart(chartElement, {\n    type: 'line',\n    data: {\n      datasets: lines.map(makeDataset)\n    },\n    options: {\n      legend: {\n        labels: {\n          boxWidth: 20\n        }\n      },\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Steps'\n          },\n          labels: lines[0].data.map((_, index) => index + 1),\n          ticks: {\n            autoSkip: false,\n            maxRotation: 0,\n            callback: tick => {\n              if (tick === 1) return 1\n              return tick % 250 === 0 ? tick : null\n            }\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: yAxisOptions.label\n          },\n          ...maybeTicks\n        }]\n      },\n      events: [],\n      animation: {\n        duration: 0\n      }\n    }\n  })\n}\n","import random from 'random'\nimport * as U from './utils'\n\nexport class GreedyActionSelector {\n  get name() {\n    return 'greedy'\n  }\n\n  selectAction(_actions, _ns, qs, _t) {\n    return U.argmax(qs)\n  }\n}\n\nexport class EpsilonGreedyActionSelector {\n  constructor(epsilon) {\n    this.epsilon = epsilon\n  }\n\n  get name() {\n    return `ε-greedy, ε = ${this.epsilon}`\n  }\n\n  selectAction(actions, _ns, qs, _t) {\n    return Math.random() < this.epsilon\n      ? U.randomChoice(actions)\n      : U.argmax(qs)\n  }\n}\n\nexport class UCBActionSelector {\n  constructor(c) {\n    this.c = c\n  }\n\n  get name() {\n    return `UCB, c = ${this.c}`\n  }\n\n  selectAction(_actions, ns, qs, t) {\n    return U.argmax(this.ucb(ns, qs, t))\n  }\n\n  ucb(ns, qs, t) {\n    return qs.map((q, index) => {\n      const n = ns[index]\n      if (n === 0) return Number.MAX_VALUE\n      return q + this.c * Math.sqrt(Math.log(t) / n)\n    })\n  }\n}\n\nexport const constantStepSizeCalculator = stepSize => _n => stepSize\nexport const decayingStepSizeCalculator = n => 1 / n\n\nexport class Experiment {\n  constructor(actions, actionSelector, stepSizeCalculator, colour, initialValue = 0) {\n    this.actions = actions\n    this.actionSelector = actionSelector\n    this.stepSizeCalculator = stepSizeCalculator\n    this.colour = colour\n    this.initialValue = initialValue\n    this.ns = []\n    this.qs = []\n  }\n\n  get name() {\n    return this.actionSelector.name\n  }\n\n  reset() {\n    this.ns = Array(this.actions.length).fill(0)\n    this.qs = Array(this.actions.length).fill(this.initialValue)\n  }\n\n  update(action, reward) {\n    const n = this.ns[action] + 1\n    this.ns[action] = n\n    const oldEstimate = this.qs[action]\n    const alpha = this.stepSizeCalculator(n)\n    const newEstimate = oldEstimate + alpha * (reward - oldEstimate)\n    this.qs[action] = newEstimate\n  }\n}\n\nexport class ExperimentResults {\n  constructor(steps) {\n    this.steps = steps\n    this.reset()\n  }\n\n  reset() {\n    this.runningAverageReward = Array(this.steps).fill(0)\n    this.runningAveragePercentOptimalAction = Array(this.steps).fill(0)\n  }\n\n  update(step, n, reward, isOptimal) {\n    this.updateRunningAverageReward(step, n, reward)\n    this.updateRunningAveragePercentOptimalAction(step, n, isOptimal)\n  }\n\n  updateRunningAverageReward(step, n, reward,) {\n    const oldAverage = this.runningAverageReward[step]\n    const newAverage = oldAverage + (1 / n) * (reward - oldAverage)\n    this.runningAverageReward[step] = newAverage\n  }\n\n  updateRunningAveragePercentOptimalAction(step, n, isOptimal,) {\n    const percentOptimalAction = isOptimal ? 100 : 0\n    const oldAverage = this.runningAveragePercentOptimalAction[step]\n    const newAverage = oldAverage + (1 / n) * (percentOptimalAction - oldAverage)\n    this.runningAveragePercentOptimalAction[step] = newAverage\n  }\n}\n\nexport class TestBed {\n  constructor(k) {\n    this.armDistributions = TestBed.makeArmDistributions(k)\n    const trueValues = this.armDistributions.map(({ trueValue }) => trueValue)\n    this.optimalArm = U.argmax(trueValues)\n  }\n\n  static makeArmDistributions(k) {\n    const trueValues = TestBed.makeTrueValues(k)\n    const armDistributions = trueValues.map((trueValue, arm) => {\n      const mean = trueValue\n      const variance = 1\n      const normal = random.normal(mean, variance)\n      return { arm, trueValue, normal }\n    })\n    return armDistributions\n  }\n\n  static makeTrueValues(k) {\n    const mean = 0\n    const variance = 1\n    const normal = random.normal(mean, variance)\n    const trueValues = U.range(k).map(normal)\n    return trueValues\n  }\n}\n\nexport const bandit = (testBed, experiment, t) => {\n  const arm = experiment.actionSelector.selectAction(\n    experiment.actions,\n    experiment.ns,\n    experiment.qs,\n    t)\n  const reward = testBed.armDistributions[arm].normal()\n  experiment.update(arm, reward)\n  const isOptimal = arm === testBed.optimalArm\n  return { reward, isOptimal }\n}\n\nexport const makeActionSelector = experimentConfig => {\n  const [actionSelectorName, ...args] = experimentConfig.actionSelector\n  switch (actionSelectorName) {\n    case 'GreedyActionSelector': return new GreedyActionSelector(...args)\n    case 'EpsilonGreedyActionSelector': return new EpsilonGreedyActionSelector(...args)\n    case 'UCBActionSelector': return new UCBActionSelector(...args)\n    default: throw new Error(`Unexpected actionSelectorName, \"${actionSelectorName}\"`)\n  }\n}\n\nexport const makeStepSizeCalculator = experimentConfig => {\n  const [stepSizeCalculatorName, ...args] = experimentConfig.stepSizeCalculator\n  switch (stepSizeCalculatorName) {\n    case 'decayingStepSizeCalculator': return decayingStepSizeCalculator\n    case 'constantStepSizeCalculator': return constantStepSizeCalculator(...args)\n    default: throw new Error(`Unexpected stepSizeCalculatorName, \"${stepSizeCalculatorName}\"`)\n  }\n}\n\nexport const makeExperiment = (experimentConfig, actions) =>\n  new Experiment(\n    actions,\n    makeActionSelector(experimentConfig),\n    makeStepSizeCalculator(experimentConfig),\n    experimentConfig.colour,\n    experimentConfig.initialValue)\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { ProgressBar } from 'react-bootstrap'\nimport SlidingPane from 'react-sliding-pane'\nimport { useCallbackWrapper } from './customHooks'\nimport SettingsPane from './SettingsPane'\nimport * as D from './diagrams'\nimport * as L from './logic'\nimport * as U from './utils'\nimport './MainView.css'\nimport 'react-sliding-pane/dist/react-sliding-pane.css'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport worker from 'workerize-loader!./worker'\n\n// --------------------------------------------------------------------------------\n\nconst pluckValueFromStep = (propertyName, workerResults, experimentIndex, step) =>\n  workerResults.map(wr => wr[experimentIndex][propertyName][step])\n\nconst pluckValuesFromSteps = (propertyName, workerResults, experimentIndex, numSteps) =>\n  U.range(numSteps).map(step =>\n    pluckValueFromStep(propertyName, workerResults, experimentIndex, step))\n\nconst averageAcrossWorkers = (propertyName, workerResults, experimentIndex, numSteps) => {\n  const workerValuesPerStep = pluckValuesFromSteps(propertyName, workerResults, experimentIndex, numSteps)\n  // step   0: [w0, w1, w2, w3]\n  // step   1: [w0, w1, w2, w3]\n  // ...\n  // step 999: [w0, w1, w2, w3]\n  return workerValuesPerStep.map(U.average)\n}\n\n// wr0: [exp0, exp1, exp2, exp4]\n// wr1: [exp0, exp1, exp2, exp4]\n// wr2: [exp0, exp1, exp2, exp4]\n// wr3: [exp0, exp1, exp2, exp4]\n// where:\n// exp0: { averageRewardsPerStep: [v0, v1, ...v999], averagePercentOptimalActions: [v0, v1, ...v999]}\n// exp1: { averageRewardsPerStep: [v0, v1, ...v999], averagePercentOptimalActions: [v0, v1, ...v999]}\n// exp2: { averageRewardsPerStep: [v0, v1, ...v999], averagePercentOptimalActions: [v0, v1, ...v999]}\n// exp3: { averageRewardsPerStep: [v0, v1, ...v999], averagePercentOptimalActions: [v0, v1, ...v999]}\nconst combineWorkerResults = workerResults => {\n\n  const firstWorkerResult = workerResults[0]\n  const firstExperiment = firstWorkerResult[0]\n\n  const numExperiments = firstWorkerResult.length\n  const numSteps = firstExperiment.averageRewards.length\n\n  const finalResults = U.range(numExperiments).map(experimentIndex => ({\n    averageRewardsPerStep: averageAcrossWorkers(\n      'averageRewards',\n      workerResults,\n      experimentIndex,\n      numSteps),\n    averagePercentOptimalActionsPerStep: averageAcrossWorkers(\n      'averagePercentOptimalActions',\n      workerResults,\n      experimentIndex,\n      numSteps)\n  }))\n  return finalResults\n}\n\n// --------------------------------------------------------------------------------\n\nconst drawDiagrams = (experiments, results) => {\n\n  const lines1 = experiments.map((experiment, experimentIndex) => ({\n    label: experiment.name,\n    colour: experiment.colour,\n    data: results[experimentIndex].averageRewardsPerStep\n  }))\n  D.drawDiagram('chart1', lines1, {\n    label: 'Average reward'\n  })\n\n  const lines2 = experiments.map((experiment, experimentIndex) => ({\n    label: experiment.name,\n    colour: experiment.colour,\n    data: results[experimentIndex].averagePercentOptimalActionsPerStep\n  }))\n  D.drawDiagram('chart2', lines2, {\n    label: '% Optimal action',\n    min: 0,\n    max: 100\n  })\n}\n\n// --------------------------------------------------------------------------------\n\n// const MIN_WEB_WORKERS = 1\nconst MAX_WEB_WORKERS = 8\nconst INITIAL_WEB_WORKERS = 4\n\n// const MIN_K = 2\nconst MAX_K = 10\nconst INITIAL_K = MAX_K\n\nconst INITIAL_RUNS = 2000\nconst INITIAL_STEPS = 1000\n\nconst MainView = () => {\n\n  const [settings, setSettings] = useState({\n    webWorkers: INITIAL_WEB_WORKERS,\n    k: INITIAL_K,\n    runs: INITIAL_RUNS,\n    steps: INITIAL_STEPS\n  })\n\n  const [experimentsConfig] = useState(() => [\n    {\n      actionSelector: ['GreedyActionSelector'],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'green'\n    },\n    {\n      actionSelector: ['EpsilonGreedyActionSelector', 0.01],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'red'\n    },\n    {\n      actionSelector: ['EpsilonGreedyActionSelector', 0.1],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'blue'\n    },\n    {\n      actionSelector: ['UCBActionSelector', 2],\n      stepSizeCalculator: ['decayingStepSizeCalculator'],\n      colour: 'purple'\n    }\n  ])\n\n  // We only create 'experiments' here because we want to read 'name' and\n  // 'colour' later inside 'drawDiagrams'. Ideally, find a way to get rid.\n  // Ideally, we'd pass 'experimentsConfig' instead of 'experiments' to 'drawDiagrams'.\n  const [experiments] = useState(() =>\n    experimentsConfig.map(experimentConfig =>\n      L.makeExperiment(experimentConfig, U.range(settings.k))))\n\n  const workerResultsRef = useRef([])\n\n  const [runsCompletedCount, setRunsCompletedCount] = useState(0)\n  const [workersCompletedCount, setWorkersCompletedCount] = useState(0)\n  const [running, setRunning] = useState(false)\n\n  const onMessage = message => {\n    switch (message.data.type) {\n\n      case 'runExperimentsRunCompleted':\n        setRunsCompletedCount(count => count + 1)\n        break\n\n      case 'runExperimentsResults':\n        setWorkersCompletedCount(count => count + 1)\n        workerResultsRef.current.push(message.data.results)\n        break\n\n      case 'RPC':\n      default:\n        return\n    }\n  }\n\n  useEffect(() => {\n    if (runsCompletedCount === settings.runs && workersCompletedCount === settings.webWorkers) {\n      const finalResults = combineWorkerResults(workerResultsRef.current)\n      drawDiagrams(experiments, finalResults)\n      setRunning(false)\n    }\n  }, [settings, experiments, runsCompletedCount, workersCompletedCount])\n\n  const onMessageCallbackWrapper = useCallbackWrapper(onMessage)\n\n  const [workerInstances] = useState(() => {\n    const workerInstances = U.range(MAX_WEB_WORKERS).map(worker)\n    workerInstances.forEach(workerInstance =>\n      workerInstance.addEventListener('message', onMessageCallbackWrapper))\n    return workerInstances\n  })\n\n  const run = useCallback(() => {\n    setRunning(true)\n    setRunsCompletedCount(0)\n    setWorkersCompletedCount(0)\n    workerResultsRef.current = []\n\n    const normalWorkerRuns = Math.floor(settings.runs / settings.webWorkers)\n    const lastWorkerRuns = settings.runs - (settings.webWorkers - 1) * normalWorkerRuns\n\n    const lastWorkerIndex = settings.webWorkers - 1\n\n    U.range(settings.webWorkers).forEach(workerIndex => {\n      const workerInstance = workerInstances[workerIndex]\n      const workerRuns = workerIndex === lastWorkerIndex ? lastWorkerRuns : normalWorkerRuns\n      const workerMessage = {\n        k: settings.k,\n        runs: workerRuns,\n        steps: settings.steps,\n        experimentsConfig\n      }\n      workerInstance.runExperiments(workerMessage, workerIndex)\n    })\n\n    drawDiagrams(experiments, experiments.map(() => ({\n      averageRewardsPerStep: [],\n      averagePercentOptimalActionsPerStep: []\n    })))\n  }, [settings, experimentsConfig, experiments, workerInstances])\n\n  useEffect(run, [run])\n\n  const onRun = () => run()\n\n  const [settingsPaneIsOpen, setSettingsPaneIsOpen] = useState(false)\n\n  const openSettingsPane = () => {\n    setSettingsPaneIsOpen(true)\n  }\n\n  const closeSettingsPane = () => {\n    setSettingsPaneIsOpen(false)\n  }\n\n  const onSettingsPaneOk = values => {\n    setSettings(values)\n    closeSettingsPane()\n  }\n\n  const onSettingsPaneCancel = () => {\n    closeSettingsPane()\n  }\n\n  return (\n    <div className=\"mainview-layout\">\n      <div className=\"controls\">\n        <span>Runs completed:</span>\n        <ProgressBar min={0} max={settings.runs} now={runsCompletedCount} />\n        <button onClick={onRun} disabled={running}>Run</button>\n        <button onClick={openSettingsPane} disabled={running}>Settings</button>\n      </div>\n      <div className=\"chart-wrapper\">\n        <canvas id=\"chart1\"></canvas>\n      </div>\n      <div className=\"chart-wrapper\">\n        <canvas id=\"chart2\"></canvas>\n      </div>\n      <SlidingPane\n        from=\"left\"\n        title=\"Settings\"\n        width=\"300px\"\n        isOpen={settingsPaneIsOpen}\n        onRequestClose={closeSettingsPane}\n      >\n        <SettingsPane\n          settings={settings}\n          onOk={onSettingsPaneOk}\n          onCancel={onSettingsPaneCancel}\n        />\n      </SlidingPane>\n    </div>\n  )\n}\n\nexport default MainView\n","import { useRef } from 'react'\n\nexport const useCallbackWrapper = cb => {\n  const cbRef = useRef(null)\n  cbRef.current = cb\n  const cbWrapper = (...args) => {\n    if (cbRef.current) {\n      return cbRef.current(...args)\n    }\n  }\n  return cbWrapper\n}\n","import { version } from '../package.json'\nimport './Version.css'\n\nconst Version = () =>\n  <div className=\"version\">version: {version}</div>\n\nexport default Version\n","import MainView from './MainView'\nimport Version from './Version'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainView />\n      <Version />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"runExperiments\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"59c62ffbc0da56f4c3f0.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t"],"sourceRoot":""}